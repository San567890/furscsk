<script src="https://cdn.socket.io/socket.io-3.1.3.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<canvas id="canvas"></canvas>
<style>
  #canvas {
    border: 1px solid black;
    width: 100%;
    height: 400px;
  }
</style>
<script>
  // Connect to the socket.io server
  const socket = io("http://localhost:3000");

  // Get the canvas element
  const canvas = document.getElementById("canvas");

  // Set the canvas dimensions
  canvas.width = canvas.clientWidth;
  canvas.height = canvas.clientHeight;

  // Get the canvas context
  const ctx = canvas.getContext("2d");

  // Set the initial drawing color and line width
  let color = "black";
  let lineWidth = 5;

  // Set up the mouse event listeners
  let isDrawing = false;
  let lastX = 0;
  let lastY = 0;

  canvas.addEventListener("mousedown", startDraw);
  canvas.addEventListener("mousemove", draw);
  canvas.addEventListener("mouseup", endDraw);

  function startDraw(e) {
    isDrawing = true;
    lastX = e.clientX - canvas.offsetLeft;
    lastY = e.clientY - canvas.offsetTop;
  }

  function draw(e) {
    if (!isDrawing) return;

    const x = e.clientX - canvas.offsetLeft;
    const y = e.clientY - canvas.offsetTop;

    ctx.beginPath();
    ctx.moveTo(lastX, lastY);
    ctx.lineTo(x, y);
    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;
    ctx.stroke();

    socket.emit("draw", { x, y, color, lineWidth });

    lastX = x;
    lastY = y;
  }

  function endDraw() {
    isDrawing = false;
  }

  // Set up the socket.io event listeners
  socket.on("connect", () => {
    console.log("Connected to the socket.io server!");
  });

  socket.on("draw", ({ x, y, color, lineWidth }) => {
    ctx.beginPath();
    ctx.moveTo(lastX, lastY);
    ctx.lineTo(x, y);
    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;
    ctx.stroke();

    lastX = x;
    lastY = y;
  });
</script>
const express = require("express");
const http = require("http");
const socketIo = require("socket.io");

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

const io = socketIo(server);

const PORT = process.env.PORT || 3000;

const canvasData = [];

io.on('connection', (socket) => {
  console.log('a user connected');

  socket.emit('canvasData', canvasData);

  socket.on('draw', (data) => {
    canvasData.push(data);
    socket.broadcast.emit('draw', data);
  });

  socket.on('erase', (data) => {
    canvasData.push(data);
    socket.broadcast.emit('erase', data);
  });

  socket.on('disconnect', () => {
    console.log('user disconnected');
  });
});

server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
<script src="https://cdn.socket.io/socket.io-3.1.3.min.js"></script>
<!DOCTYPE html>
<html>
  <head>
    <title>Collaborative Drawing App</title>
    <style>
      canvas {
        border: 1px solid black;
      }
    </style>
  </head>
  <body>
    <canvas id="canvas"></canvas>
    <script src="https://cdn.socket.io/socket.io-3.1.3.min.js"></script>
    <script>
      const canvas = document.getElementById('canvas');
      const ctx = canvas.getContext('2d');
      const socket = io();

      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;

      let drawing = false;
      let lastX, lastY;
      let erase = false;

      function startDraw(e) {
        drawing = true;
        [lastX, lastY] = [e.clientX, e.clientY];
      }

      function draw(e) {
        if (!drawing) return;
        if (erase) {
          ctx.globalCompositeOperation = 'destination-out';
          ctx.strokeStyle = 'rgba(0,0,0,0)';
        } else {
          ctx.globalCompositeOperation = 'source-over';
          ctx.strokeStyle = 'black';
        }
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(e.clientX, e.clientY);
        ctx.stroke();
        [lastX, lastY] = [e.clientX, e.clientY];
        socket.emit('draw', { lastX, lastY, erase });
      }

      function endDraw() {
        drawing = false;
      }

      socket.on('draw', ({ lastX, lastY, erase }) => {
        if (!drawing) {
          if (erase) {
            ctx.globalCompositeOperation = 'destination-out';
            ctx.strokeStyle = 'rgba(0,0,0,0)';
          } else {
            ctx.globalCompositeOperation = 'source-over';
            ctx.strokeStyle = 'black';
          }
          ctx.beginPath();
          ctx.moveTo(lastX, lastY);
          ctx.lineTo(lastX + 1, lastY + 1);
          ctx.stroke();
        }
      });

      socket.on('clear', () => {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      });

      function clearCanvas() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        socket.emit('clear');
      }

      function eraseCanvas() {
        erase = true;
      }

      function drawCanvas() {
        erase = false;
      }

      window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      });

      canvas.addEventListener('mousedown', startDraw);
      canvas.addEventListener('mousemove', draw);
      canvas.addEventListener('mouseup', endDraw);
    </script>
    <button onclick="clearCanvas()">Clear Canvas</button>
    <button onclick="eraseCanvas()">Erase</button>
    <button onclick="drawCanvas()">Draw</button>
  </body>
</html>


